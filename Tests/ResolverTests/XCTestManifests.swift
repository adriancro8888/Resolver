#if !canImport(ObjectiveC)
import XCTest

extension ResolverBasicTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ResolverBasicTests = [
        ("testRegistrationAndExplicitResolution", testRegistrationAndExplicitResolution),
        ("testRegistrationAndInferedResolution", testRegistrationAndInferedResolution),
        ("testRegistrationAndOptionalResolution", testRegistrationAndOptionalResolution),
        ("testRegistrationAndOptionalResolutionFailure", testRegistrationAndOptionalResolutionFailure),
        ("testRegistrationAndPassedResolver", testRegistrationAndPassedResolver),
        ("testRegistrationAndResolutionArguments", testRegistrationAndResolutionArguments),
        ("testRegistrationAndResolutionChain", testRegistrationAndResolutionChain),
        ("testRegistrationAndResolutionProperties", testRegistrationAndResolutionProperties),
        ("testRegistrationAndResolutionPropertiesArgs", testRegistrationAndResolutionPropertiesArgs),
        ("testRegistrationAndResolutionResolve", testRegistrationAndResolutionResolve),
        ("testRegistrationAndResolutionResolveArgs", testRegistrationAndResolutionResolveArgs),
        ("testRegistrationOverwritting", testRegistrationOverwritting),
        ("testRegistrationWithArgsCodeCoverage", testRegistrationWithArgsCodeCoverage),
        ("testStaticRegistrationAndResolution", testStaticRegistrationAndResolution),
        ("testStaticRegistrationWithArgsAndResolution", testStaticRegistrationWithArgsAndResolution),
    ]
}

extension ResolverClassTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ResolverClassTests = [
        ("testRegistrationAndExplicitResolution", testRegistrationAndExplicitResolution),
        ("testRegistrationAndInferedResolution", testRegistrationAndInferedResolution),
        ("testRegistrationAndOptionalResolution", testRegistrationAndOptionalResolution),
        ("testRegistrationAndOptionalResolutionFailure", testRegistrationAndOptionalResolutionFailure),
        ("testRegistrationAndPassedResolver", testRegistrationAndPassedResolver),
        ("testRegistrationAndResolutionArguments", testRegistrationAndResolutionArguments),
        ("testRegistrationAndResolutionChain", testRegistrationAndResolutionChain),
        ("testRegistrationAndResolutionProperties", testRegistrationAndResolutionProperties),
        ("testRegistrationAndResolutionResolve", testRegistrationAndResolutionResolve),
        ("testRegistrationAndResolutionResolveArgs", testRegistrationAndResolutionResolveArgs),
        ("testRegistrationOverwritting", testRegistrationOverwritting),
    ]
}

extension ResolverContainerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ResolverContainerTests = [
        ("testResolverDistinctContainers", testResolverDistinctContainers),
        ("testResolverDistinctContainersRedux", testResolverDistinctContainersRedux),
        ("testResolverParentContainerOverride", testResolverParentContainerOverride),
        ("testResolverParentContainers", testResolverParentContainers),
    ]
}

extension ResolverNameTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ResolverNameTests = [
        ("testResolverInvalidNames", testResolverInvalidNames),
        ("testResolverNamesWithBaseService", testResolverNamesWithBaseService),
        ("testResolverNamesWithNoBaseService", testResolverNamesWithNoBaseService),
        ("testResolverValidNames", testResolverValidNames),
    ]
}

extension ResolverProtocolTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ResolverProtocolTests = [
        ("testMultipeProtocolsWithForwarding", testMultipeProtocolsWithForwarding),
        ("testMultipeProtocolsWithImplements", testMultipeProtocolsWithImplements),
        ("testMultipeProtocolsWithOptionalResolution", testMultipeProtocolsWithOptionalResolution),
        ("testProtocolWithExplicitResolution", testProtocolWithExplicitResolution),
        ("testProtocolWithInferedResolution", testProtocolWithInferedResolution),
        ("testProtocolWithOptionalResolution", testProtocolWithOptionalResolution),
        ("testScopeSharedProtocols", testScopeSharedProtocols),
    ]
}

extension ResolverScopeNameTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ResolverScopeNameTests = [
        ("testResolverScopeNameApplication", testResolverScopeNameApplication),
        ("testResolverScopeNameCached", testResolverScopeNameCached),
        ("testResolverScopeNameGraph", testResolverScopeNameGraph),
        ("testResolverScopeNameShared", testResolverScopeNameShared),
        ("testResolverScopeNameUnique", testResolverScopeNameUnique),
    ]
}

extension ResolverScopeReferenceTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ResolverScopeReferenceTests = [
        ("testResolverScopeApplication", testResolverScopeApplication),
        ("testResolverScopeCached", testResolverScopeCached),
        ("testResolverScopeGraph", testResolverScopeGraph),
        ("testResolverScopeShared", testResolverScopeShared),
        ("testResolverScopeUnique", testResolverScopeUnique),
    ]
}

extension ResolverScopeValueTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ResolverScopeValueTests = [
        ("testResolverScopeApplication", testResolverScopeApplication),
        ("testResolverScopeCached", testResolverScopeCached),
        ("testResolverScopeGraph", testResolverScopeGraph),
        ("testResolverScopeShared", testResolverScopeShared),
        ("testResolverScopeUnique", testResolverScopeUnique),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(ResolverBasicTests.__allTests__ResolverBasicTests),
        testCase(ResolverClassTests.__allTests__ResolverClassTests),
        testCase(ResolverContainerTests.__allTests__ResolverContainerTests),
        testCase(ResolverNameTests.__allTests__ResolverNameTests),
        testCase(ResolverProtocolTests.__allTests__ResolverProtocolTests),
        testCase(ResolverScopeNameTests.__allTests__ResolverScopeNameTests),
        testCase(ResolverScopeReferenceTests.__allTests__ResolverScopeReferenceTests),
        testCase(ResolverScopeValueTests.__allTests__ResolverScopeValueTests),
    ]
}
#endif
